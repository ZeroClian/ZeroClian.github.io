<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AarryList  和 LinkedList 的区别?</title>
    <url>/2021/01/02/AarryList%20%20%E5%92%8C%20LinkedList%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="AarryList-和-LinkedList-的区别"><a href="#AarryList-和-LinkedList-的区别" class="headerlink" title="AarryList  和 LinkedList 的区别?"></a>AarryList  和 LinkedList 的区别?</h1><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>​    都是不同步的，也就是不保证线程安全</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul>
<li>ArrayList ：使用 Object 数组</li>
<li>LinkedList<ul>
<li>JDK1.6之前使用双向循环链表</li>
<li>JDK1.7取消了循环，使用双向链表</li>
</ul>
</li>
</ul>
<h2 id="其他区别"><a href="#其他区别" class="headerlink" title="其他区别"></a>其他区别</h2><ul>
<li>ArrayList <ul>
<li>支持快速随机访问</li>
<li>需要预留一定的容量空间</li>
</ul>
</li>
<li>LinkedList<ul>
<li>不支持快速随机访问</li>
<li>存储每一个元素都要消耗更多的空间</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>面试必备</category>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode的一些骚操作</title>
    <url>/2020/12/30/VSCode%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="一、界面美化"><a href="#一、界面美化" class="headerlink" title="一、界面美化"></a>一、界面美化</h2><blockquote>
<p>一个会动的萌妹</p>
</blockquote>
<ol>
<li>在vscode的安装目录下找到</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resources\app\out\vs\code\electron-browser\workbench</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>用记事本打开workbench.html，将里面的内容替换为下面的代码，建议把原来的代码保存下来，以便可以换换回来。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Copyright (C) Microsoft Corporation. All rights reserved. --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; img-src &#x27;self&#x27; https: data: blob: vscode-remote-resource:; media-src &#x27;none&#x27;; frame-src &#x27;self&#x27; vscode-webview: https://*.vscode-webview-test.com; object-src &#x27;self&#x27;; script-src * &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27;; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;; connect-src &#x27;self&#x27; https:; font-src &#x27;self&#x27; https: vscode-remote-resource:;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-id">#live2dcanvas</span> &#123;<span class="attribute">border</span>: <span class="number">0</span> <span class="meta">!important</span>;&#125;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">aria-label</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;live2d-widget&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;live2dcanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;width:100px;height:200;opacity: 0.5;right: 0px;bottom: -20px;z-index: 99999;pointer-events: none;border:0;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Init Bootstrap Helpers --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../../../bootstrap.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../../../vs/loader.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../../../bootstrap-window.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Startup via workbench.js --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;workbench.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/live2d-widget@3.0.4/lib/L2Dwidget.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>  <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/live2d-widget@3.0.4/lib/L2Dwidget.min.js?_=1557308476616&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="comment">// L2Dwidget.init();</span></span></span><br><span class="line"><span class="javascript">	  L2Dwidget.init(&#123;<span class="string">&quot;display&quot;</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;superSample&quot;</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;width&quot;</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;height&quot;</span>: <span class="number">200</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;position&quot;</span>: <span class="string">&quot;right&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;hOffset&quot;</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;vOffset&quot;</span>: <span class="number">0</span></span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>重启vscode的就行了</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/vscode/image-20201212170125748.png" alt="image-20201212170125748"></p>
<ol start="4">
<li>恢复的话，只要把代码该回去就行</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Copyright (C) Microsoft Corporation. All rights reserved. --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; img-src &#x27;self&#x27; https: data: blob: vscode-remote-resource:; media-src &#x27;none&#x27;; frame-src &#x27;self&#x27; vscode-webview: https://*.vscode-webview-test.com; object-src &#x27;self&#x27;; script-src &#x27;self&#x27; &#x27;unsafe-eval&#x27;; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;; connect-src &#x27;self&#x27; https:; font-src &#x27;self&#x27; https: vscode-remote-resource:;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">aria-label</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Init Bootstrap Helpers --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../../../bootstrap.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../../../vs/loader.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../../../bootstrap-window.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- Startup via workbench.js --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;workbench.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="二、代码特效"><a href="#二、代码特效" class="headerlink" title="二、代码特效"></a>二、代码特效</h2><ol>
<li>在vscode中搜索插件Power Mode，安装后重启</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/vscode/image-20201212170613027.png" alt="image-20201212170613027"></p>
<ol start="2">
<li>在设置里找到setting.json,点击编辑</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/vscode/image-20201212170835829.png" alt="image-20201212170835829"></p>
<ol start="3">
<li>在里面添加几行代码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;powermode.enabled&quot;: true,</span><br><span class="line">&quot;powermode.presets&quot;: &quot;fireworks&quot;,   &#x2F;&#x2F;动画效果</span><br><span class="line">&quot;powermode.comboTimeout&quot;:4,       &#x2F;&#x2F; 时间间隔</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/vscode/image-20201212171012762.png" alt="image-20201212171012762"></p>
<ol start="4">
<li>重启后就有特效了</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/vscode/image-20201212171052917.png" alt="image-20201212171052917"></p>
<ol start="5">
<li>不想要只要删除代码即可（更多特效可以百度找找）</li>
</ol>
<h2 id="三、可能出现的问题"><a href="#三、可能出现的问题" class="headerlink" title="三、可能出现的问题"></a>三、可能出现的问题</h2><p>重启完成之后，我们可能会看到<strong>不受支持</strong>提示。是因为我们改动了vscode的内部代码，所以会提示。</p>
<p>我们来解决它。</p>
<p>打开命令行，安装<code>Fix VSCode Checksums</code>，键入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code --install-extension lehni.vscode-fix-checksums</span><br></pre></td></tr></table></figure>
<p>打开vscode，快捷键 <code>Ctrl + Shift + P</code> 输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Fix Checksums:Apply</span><br></pre></td></tr></table></figure>
<p>重启Vscode，解决。</p>
<hr>
<p>本文只是代码之余的一点娱乐，打码枯燥，适当给自己增加点乐趣，想必大家写php也写累了</p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>List、Set、Map三者的区别？</title>
    <url>/2021/01/02/List%E3%80%81Set%E3%80%81Map%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
    <content><![CDATA[<p>Java 容器分为 Collection 和 Map 两大类，Collection 集合的子接口有 Set、List、Queue 三种子接口，我们比较常用的Set、List，Map 接口不是 Collection 的子接口。<br><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/1609561439429-0560ff2e-6b53-4d14-ae32-d862c7ef10c8.png" alt="Java 容器"><br>Collection 集合主要有 List 和 Set :</p>
<ul>
<li>List ：一个有序的容器，元素可以重复，可以插入多个 null 值，元素都有索引。常用实现类为：ArrayList、LinkedList 和 Vector</li>
<li>Set ：一个无序的容器，元素不可以重复，只允许存在一个 null 值，必须保证元素唯一性。常用实现类为：HashSet、LinkedHashSet 和 TreeSet。</li>
</ul>
<p>Map 是一个键值对集合，存储键、值之间的映射。Key 无序，唯一；Value 不要求有序，可重复。常用实现类：HashMap、TreeMap、HashTable、LinkeHashMap、ConcurrentHashMap。</p>
<h2 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h2><ul>
<li>list<ul>
<li>ArrayList：Object 数组</li>
<li>LinkedList：双向循环链表</li>
<li>Vector：Object 数组</li>
</ul>
</li>
<li>Set<ul>
<li>HashSet：HashMap</li>
<li>LinkedHashSet：LinkedHashMap（内部基于HashMap）</li>
<li>TreeSet：红黑树</li>
</ul>
</li>
<li>Map<ul>
<li>HashMap： JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）.JDK1.8以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。</li>
<li>LinkedHashMap：LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，LinkedHashMap 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。</li>
<li>HashTable：数组+链表</li>
<li>TreeMap：红黑树</li>
</ul>
</li>
</ul>
<h2 id="线程安全的集合类"><a href="#线程安全的集合类" class="headerlink" title="线程安全的集合类"></a>线程安全的集合类</h2><ul>
<li>vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。</li>
<li>statck：堆栈类，先进后出。</li>
<li>hashtable：就比hashmap多了个线程安全。</li>
<li>enumeration：枚举，相当于迭代器。</li>
</ul>
]]></content>
      <categories>
        <category>面试必备</category>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IOC &amp; AOP</title>
    <url>/2021/01/01/Spring%20IOC%20&amp;%20AOP/</url>
    <content><![CDATA[<h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><p>IoC（Inverse of Control 控制反转 ）是基于<strong>依赖倒置原则</strong>的一种设计思想，就是将原本由程序手动创建对象的控制权，交给 Spring 来管理。IoC 在其他语言中也有应用，并非 Spring 独有，IoC 容器是 Spring 用来实现IoC的载体，IoC 容器实际上就是一个 Map（Key，Value），用来存放各种对象。</p>
<p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器来完成对象的注入。这样可以很大程度的简化应用的开发，把应用从复杂的依赖关系中解放出来。IoC 容器就像一个工厂一样，当我们需要创建一个对象的时候，只需要配置配置文件或注解即可，完全不需要考虑对象是如何被创建出来的。</p>
<p>在实际项目中一个 Service 类可能有成百上千个类作为它的底层，如果利用 IoC 的话，只需要配置好，然后在需要的地方引用即可，大大增加了项目的可维护性，降低了开发难度。</p>
<p>IoC 采用的方法是<strong>依赖注入</strong>，即把底层类作为参数传入上层类，实现上层类对下层类的“控制”，常用的注入方式有：构造函数注入、Setter注入和接口注入。</p>
<p>而 IoC 容器可以自动对代码进行初始化，只需要通过维护一个 Configuration，使我们在创建实例时不需要去了解其中的细节。</p>
<p>Spring IoC 的初始化过程：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20201231104036853.png" alt="image-20201231104036853"></p>
<p>IoC 源码阅读：<a href="https://javadoop.com/post/spring-ioc">https://javadoop.com/post/spring-ioc</a></p>
<h2 id="IoC-核心思想"><a href="#IoC-核心思想" class="headerlink" title="IoC 核心思想"></a>IoC 核心思想</h2><p>IoC 的核心思想在于，资源不由使用资源的双方管理，而是由第三方管理。</p>
<p>带来的好处：</p>
<ul>
<li>资源集中管理，实现资源的可配置和易管理</li>
<li>降低使用资源双方的耦合度</li>
</ul>
<p>生活中的例子：支付宝在淘宝体系中就是一个庞大的 IoC 容器，其他代理机构。</p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP（面向切面编程）能够将那些与业务无关的，却为业务模块所共同调用的逻辑或责任（如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块的耦合度，并有利于未来的可拓展性和可维护性。</p>
<p>Spring AOP 是基于动态代理的，如果要代理的对象实现了某个接口，那么 Spring AOP 就会使用 JDK Proxy 去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理，会采用 Cglib 生成一个被代理对象的子类来作为代理对象。如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20201231105317219.png" alt="image-20201231105317219"></p>
<p>使用 AOP 之后我们就可以把通用功能抽象出来，在需要的地方直接使用，大大简化了代码量。</p>
<h2 id="Spring-AOP-和-AspectJ-AOP-有什么区别？"><a href="#Spring-AOP-和-AspectJ-AOP-有什么区别？" class="headerlink" title="Spring AOP 和 AspectJ AOP 有什么区别？"></a>Spring AOP 和 AspectJ AOP 有什么区别？</h2><p><strong>Spring AOP</strong> 属于运⾏时增强，⽽ <strong>AspectJ</strong> 是编译时增强。 Spring AOP 基于代理(Proxying)，⽽AspectJ 基于字节码操作(Bytecode Manipulation)。</p>
<p>Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java ⽣态系统中最完整的 AOP 框架了。AspectJ 相⽐于 Spring AOP 功能更加强⼤，但是 Spring AOP 相对来说更简单，</p>
<p>如果我们的切⾯⽐较少，那么两者性能差异不⼤。但是，当切⾯太多的话，最好选择 AspectJ ，它⽐Spring AOP 快很多。</p>
]]></content>
      <categories>
        <category>Spring全家桶</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>哪個英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #FF7242;color: #fff">查看答案
  </button><span class="hide-content">因為西裝褲(C裝酷)</span></span></p>
<p>門裏站着一個人? <span class="hide-inline"><button type="button" class="hide-button button--animated" style="">Click
  </button><span class="hide-content">閃</span></span></p>
<a class="btn-beautify button--animated blue larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right fa-fw"></i><span>Butterfly</span></a>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>回顾2020年</title>
    <url>/2020/12/31/%E5%9B%9E%E9%A1%BE2020%E5%B9%B4/</url>
    <content><![CDATA[<h2 id="回顾2020年"><a href="#回顾2020年" class="headerlink" title="回顾2020年"></a>回顾2020年</h2><p>年初，突如其来的疫情，打乱了原有的计划，小时候梦想什么时候能在家学习多好，在这一年就这么实现了，但是学起来才发现，似乎并没有幻想中那么美好，老师上网课方式各种各样，手机电脑下载一堆软件，网上的课总是令人提不起精神，或许是我对这些课不感兴趣吧。</p>
<p>在家期间了也学了点别的，买了个云服务器用 SpringBoot 搭了个博客网站，但是没敢把文章放上去，生怕自己环境弄不好，一下子数据库崩了，我对数据库也不是很熟悉。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20201231213204148.png"></p>
<p>学了那么一阵子，突然觉得自己行了，想找份实习，于是开始投简历，投了各种级别的公司，发现自己笔试的算法题都做不出几道来，于是开始恶补数据结构和算法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20201231214049340.png"></p>
<p>在 leetcode 上做了一百多道题目后，常见的题目都掌握了，刷题的脚步也停了下来，有点半途而废的感觉。学习过程中，也会写写笔记，然后放到 csdn 博客上，没想到的是大三做的一个课程设计，看和收藏的人最多，</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20201231214741252.png"></p>
<p>一年过去，看着博客从每个都是0，到现在</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20201231214936990.png"></p>
<p>感觉像是自己带大的孩子，虽然自己还是很菜，但是新的一年还是想继续坚持下去。</p>
<p>投了许多简历，也收到了一些面试的邀请，面试过程中，发现自己学的并不是很扎实，有些知识明明学过，却说不出个所以然，结果可想而知。回想自己的学习过程，似乎一直在接受新知识，却没有对已学的知识加深了解，也明白到自己要在一个方面强化自己的优势，要沉下心来。</p>
<p>很快暑假就在线上面试中过去了，迎来了大四的开学，开学也刚好让我转正，成为了一名光荣的中共党员。让我没想到的是，匿名投票选支委，居然让选了我当学生党支部副书记，没想到大家这么看好我（我怀疑有人串通，说好的民主呢）。</p>
<p>成为副书记，开启了我忙碌的大四，党务工作真是令人头大，发展党员的各种流程，入党志愿书上的各种日期和签名，生怕时间不对，写错字，这里要感谢亿阳和梓涵带我，我对这些都有阴影了。</p>
<p>好不容易弄完了发展党员，觉得可以休息一阵子好好准备面试，结果要准备检查材料，最后一天冲刺从早上9点去办公室待到晚上10点多才回的宿舍，终于搞定了，看着一桌子分类好的材料，大家都辛苦了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20201231221426422.png"></p>
<p>随着事情一件一件一件的忙完，学期似乎也到了尾声，某老师也开始布置他那为难人的 php 作业，好在今年的难度比去年的低了很多，不过大多数的同学还是不是很懂，也因此我弄了个公众号，写了一些作业相关的文章。不得不吐槽一下，我知道老师你很牛逼，但是也不用每节课都花那么长的时间夸你自己吧，凡尔赛实锤了。</p>
<p>弄完了作业，结束了考试，考试期间一时兴起，又弄了个静态网站，因为买的服务器要到期了，我又穷，就用 Hexo + GitHub 弄了个博客，大佬的框架就是香啊，博客地址：<a href="https://zeroclian.github.io/">https://zeroclian.github.io/</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20201231222849876.png"></p>
<p>2020年就这么结束了，不知道2021会怎么样，但是希望未来的日子能够充满阳光。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20201231223446172.png" alt="I Love you. YCL&amp;LRY"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 MySQL 事务</title>
    <url>/2021/01/02/%E6%B5%85%E8%B0%88%20MySQL%20%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="浅谈-MySQL-事务"><a href="#浅谈-MySQL-事务" class="headerlink" title="浅谈 MySQL 事务"></a>浅谈 MySQL 事务</h1><hr>
<h2 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h2><ul>
<li>事务是逻辑上的一组操作，要么全部执行，要么都不执行</li>
</ul>
<h2 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h2><ul>
<li>原子性（Atomicity）：事务是最小的执行单位，不允许分割，原子性保证事务的动作要么全部成功，要么全部失败。</li>
<li>一致性（Consistency）：执行事务前后，数据保持一致，多个事务对数据读取的结果是一致的。</li>
<li>隔离性（Isolation）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各种并发事务之间数据库是独立的。</li>
<li>持久性（Durability）：一个事务被提交后，对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何的影响。</li>
</ul>
<h2 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h2><p>在典型的应⽤程序中，多个事务并发运⾏，经常会操作相同的数据来完成各⾃的任务（多个⽤户对同⼀数据进⾏操作）。并发虽然是必须的，但可能会导致以下的问题。</p>
<ul>
<li>脏读（<strong>Dirty read</strong>）:当⼀个事务正在访问数据并且对数据进⾏了修改，⽽这种修改还没有提交到数据库中，这时另外⼀个事务也访问了这个数据，然后使⽤了这个数据。因为这个数据是还没有提交的数据，那么另外⼀个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</li>
<li>丢失修改（<strong>Lost to modify</strong>）: 指在⼀个事务读取⼀个数据时，另外⼀个事务也访问了该数据，那么在第⼀个事务中修改了这个数据后，第⼆个事务也修改了这个数据。这样第⼀个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</li>
<li>不可重复读（<strong>Unrepeatableread</strong>）: 指在⼀个事务内多次读同⼀数据。在这个事务还没有结束时，另⼀个事务也访问该数据。那么，在第⼀个事务中的两次读数据之间，由于第⼆个事务的修改导致第⼀个事务两次读取的数据可能不太⼀样。这就发⽣了在⼀个事务内两次读到的数据是不⼀样的情况，因此称为不可重复读。</li>
<li>幻读（<strong>Phantom read</strong>）: 幻读与不可重复读类似。它发⽣在⼀个事务（T1）读取了⼏⾏数据，接着另⼀个并发事务（T2）插⼊了⼀些数据时。在随后的查询中，第⼀个事务（T1）就会发现多了⼀些原本不存在的记录，就好像发⽣了幻觉⼀样，所以称为幻读。</li>
</ul>
<p><strong>不可重复读和幻读区别：</strong></p>
<p>​        不可重复读的重点是修改⽐如多次读取⼀条记录发现其中某些列的值被修改，幻读的重点在于新增或者删除⽐如多次读取⼀条记录发现记录增多或减少了。</p>
<hr>
<h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>SQL 标准定义了四个隔离级别：</p>
<ul>
<li>READ-UNCOMMITTED(读取未提交)：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li>
<li>READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，可以阻⽌脏读，但是幻读或不可重复读仍有可能发⽣。</li>
<li>REPEATABLE-READ(可重复读)： 对同⼀字段的多次读取结果都是⼀致的，除⾮数据是被本身事务⾃⼰所修改，可以阻⽌脏读和不可重复读，但幻读仍有可能发⽣。</li>
<li>SERIALIZABLE(可串⾏化)： 最⾼的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执⾏，这样事务之间就完全不可能产⽣⼲扰，也就是说，该级别可以防⽌脏读、不可重复读以及幻读。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20210102165004946.png" alt="隔离级别"></p>
<p>MySQL InnoDB 存储引擎的默认⽀持的隔离级别是 <strong>REPEATABLE-READ</strong>（可重读）。我们可以通过<code>SELECT @@tx_isolation;</code> 命令来查看。</p>
]]></content>
      <categories>
        <category>面试必备</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>面试之——浅谈Spring MVC</title>
    <url>/2021/01/02/%E9%9D%A2%E8%AF%95%E4%B9%8B%E2%80%94%E2%80%94%E6%B5%85%E8%B0%88Spring-MVC/</url>
    <content><![CDATA[<h1 id="面试之——浅谈Spring-MVC"><a href="#面试之——浅谈Spring-MVC" class="headerlink" title="面试之——浅谈Spring MVC"></a>面试之——浅谈Spring MVC</h1><p>MVC 是一种设计模式，Spring MVC 是一款优秀的 MVC 框架，能够帮助我们进行更加便捷的 Web 层开发，在Spring MVC 下我们把后端项目分为 Service 层（处理业务）、Dao 层（数据库操作）、Entity 层（实体类）、Controller 层（控制层，返回数据给前端页面）。</p>
<p>原理图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20210102153954018.png" alt="Spring MVC"></p>
<h2 id="Spring-MVC-工作原理"><a href="#Spring-MVC-工作原理" class="headerlink" title="Spring MVC 工作原理"></a>Spring MVC 工作原理</h2><p><img src="https://cdn.jsdelivr.net/gh/ZeroClian/picture/img/image-20210102154259946.png" alt="Spring MVC 工作原理"></p>
<ol>
<li>客户端发送请求，直接请求发送到 <code>DispatcherServlet</code>。</li>
<li> <code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code>，解析请求对应的<code>Handler</code>。</li>
<li>解析到对应的 Handler（即 Controller）后，开始由 HandlerAdapter 适配器处理。</li>
<li><code>HandlerAdapter</code> 会根据 <code>Handler</code> 来调用真正的处理器开始处理请求，并处理相应的业务逻辑。</li>
<li>处理器完成业务后，会返回一个 <code>ModelAndView</code> 对象，<code>Model</code> 是返回的数据对象，<code>View</code> 是个逻辑上的 <code>View</code>。</li>
<li><code>ViewResolver</code> 会根据逻辑 <code>View</code> 查找实际的 <code>View</code>。</li>
<li><code>DispaterServlet</code> 把返回的 <code>Model</code> 传给 <code>View</code> （视图渲染）。</li>
<li>把 <code>View</code> 返回给请求者（客户端）。 </li>
</ol>
]]></content>
      <categories>
        <category>面试必备</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
